#!/usr/bin/env ruby
# vim: ft=ruby

class Brightness
  VERSION = "0.1.0"

  BIN_FILENAME     = "/usr/bin/brightness"
  SERVICE_FILENAME = "/etc/systemd/system/brightness.service"
  SERVICE_FILE = <<-FILE
    # #{SERVICE_FILENAME}
    [Unit]
    Description=Allow all users to write to the brightness files

    [Service]
    Type=simple
    ExecStart=/bin/sh -c 'DIR=/sys/class/backlight/intel_backlight/; chmod a+rw $DIR"brightness" $DIR"max_brightness"'

    [Install]
    WantedBy=default.target
  FILE

  SUMMARY = "Change the brightness via `/sys/class/backlight/intel_backlight` files."
  USAGE = <<-MSG
    #{SUMMARY}

    Usage

      brightness {up|down} [LEVEL]  # increase/decrease
      brightness [LEVEL]            # set level or see current level and max
      brightness install            # fix permissions, add to /usr/bin, add systemd service

    Note

    The files we need are only rw for root, and this gets reset on boot, so you'll need
    to run

      brightness install

    Before you can do much with this. The install is interactive, no worries.

    License: MIT
  MSG

  class LevelError < ArgumentError; end
  class FileError  < StandardError; end

  DEFAULT = 5

  def max_file
    @max_file ||=
      begin
        f = File.join(dir, "max_brightness")
        raise FileError, "max file (#{f}) does not exist" unless File.file?(f)
        f
      end
  end

  def file
    @file ||=
      begin
        f = File.join(dir, "brightness")
        raise FileError, "brightness file (#{f}) does not exist" unless File.file?(f)
        f
      end
  end

  def max
    File.read(max_file).to_i
  end

  def current
    File.read(file).to_i
  end

  def up n
    delta(sanitize_delta(n))
  end

  def down n
    delta(-sanitize_delta(n))
  end

  def current= n
    raise ArgumentError, "max volume (#{max}) reached, attempted #{n}"  if n > max
    raise ArgumentError, "attempted to set volume to 0 or lower (#{n})" if n <= 0
    File.open(file, "w") { |f| f.puts n }
  end

  def delta d
    self.current += d
  end

  def to_s
    <<-STR
      max    : #{max.to_s.ljust(10, ' ')} (#{max_file})
      current: #{current.to_s.ljust(10, ' ')} (#{file})
    STR
  end

  def interactive!
    puts self
    puts "Change the brightness (^D to quit)"
    loop do
      begin
        print "brightness: "
        level = $stdin.gets
        unless level
          puts
          break
        end

        level = level.chomp.to_i
        self.current = level
      rescue ArgumentError => e
        puts "[ERROR] #{e}"
      end
    end
  end

  def install!
    if ask? "Install `#{BIN_FILENAME}`"
      sh "cp #{$0} #{BIN_FILENAME}"
    end
    if ask? "Make brightness files writable"
      sh "sudo chmod u+rw /sys/class/backlight/intel_backlight/{brightness,max_brightness}"
    end
    if ask? "Install `#{SERVICE_FILENAME}`"
      File.open(SERVICE_FILENAME, 'w') { |f| f.puts SERVICE_FILE }
      puts "wrote service to `#{SERVICE_FILENAME}`"
    end
    sh "sudo systemctl enable brightness" if ask? "enable service"
  end

  private

  def sh cmd
    puts cmd
    code = system(cmd)
    abort "exited with #{$?}" unless code
    code
  end

  def ask? question
    choice = nil
    loop do
      print "(y/n) #{question}? "

      begin
        choice = $stdin.gets
      rescue Interrupt => e
        abort(e.message)
      end

      abort("^D") if choice.nil?
      choice.chomp!

      break if %w[y ye yes n no].include?(choice)
    end
    choice[0] == "y" ? true : false
  end

  def sanitize_delta d
    d.nil? || d == "" ? DEFAULT : d.to_i
  end

  def dir
    @dir ||= "/sys/class/backlight/intel_backlight/"
  end
end

if File.basename($0) == File.basename(__FILE__)
  b = Brightness.new
  case n = ARGV[0]
  when "-h", "--help"
    puts Brightness::USAGE
  when "-i"
    b.interactive!
  when "install"
    b.install!
  when "up"
    b.up ARGV[1]
  when "down"
    b.down ARGV[1]
  else
    n.nil? || n == '' ? puts(b) : b.current = n.to_i
  end
end
